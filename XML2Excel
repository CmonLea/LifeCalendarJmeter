package com.testlink;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.dom4j.Attribute;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.junit.Ignore;
import org.junit.Test;

public class XML2Excel {
	/**
	 * 获取文件的document对象，然后获取对应的根节点
	 * 
	 * @author chenleixing
	 */
	// private static String testCasePath = "";
	SAXReader sax = new SAXReader();// 创建一个SAXReader对象
	File xmlFile = new File("用例模板.xml");
	static Element parentNode = null;
	static int testsuiteDeep=1;

	@Test

	public void testGetRoot() throws Exception {
		// 根据指定的路径创建file对象
		Document document = sax.read(xmlFile);// 获取document对象,如果文档无节点，则会抛出Exception提前结束
		Element root = document.getRootElement();// 获取根节点
		getNodes(root);// 从根节点开始遍历所有节点

	}

	@Test
	@Ignore
	public void test1() throws DocumentException {
		// String xml ="...";
		Document doc = sax.read(xmlFile);
		Element rootElement = doc.getRootElement();

		// iterate through child elements of root with element name "foo"
		// for (Iterator<Element> it = rootElement.elementIterator("testsuite");
		// it.hasNext();) {
		// Element foo = it.next();
		// System.out.println(foo.getStringValue());
		// // do something
		// }

		// iterate through child elements of root
		// for (Iterator<Element> it = rootElement.elementIterator(); it.hasNext();) {
		// Element element = it.next();
		// System.out.println(element.getName()+"："+element.getStringValue());
		// // do something
		// }

		// iterate through attributes of root
		// for (Iterator<Attribute> it = rootElement.attributeIterator(); it.hasNext();)
		// {
		// Attribute attribute = it.next();
		// System.out.println(attribute.getQualifiedName() + "：" +
		// attribute.getStringValue());
		// // do something
		// }

	}

	/**
	 * 从指定节点开始,递归遍历所有子节点
	 * 
	 * @author chenleixing
	 */
	public void getNodes(Element node) {
		System.out.println("--------------------");
		String testCasePath = "";
		// 当前节点的名称、文本内容和属性
		String nodeName = node.getName();
		String nodeContent = node.getTextTrim();
		System.out.println("当前节点名称：" + nodeName);// 当前节点名称
		System.out.println("当前节点的内容：" + nodeContent);// 当前节点内容
		if (nodeName.equals("testsuite") && !node.isRootElement() && node.element("testcase") != null) {
			// 非根节点且包含测试用例

			System.out.println("===================节点名称为:" + node.attributeValue("name") + "节点路径为:" + node.getPath());
			String nodePath= node.getPath();
			
			testCasePath = node.getPath();
			System.out.println("父节点的名称为:" + node.getParent().attributeValue("name"));

			if(node.getParent().attributeValue("name")=="") {
				System.out.println(node.attributeValue("name")+"不存在多层路径");
			}else {
				getTestCasePath(nodePath);
				List<String> testSuitePathList=new ArrayList<>();
				parentNode=node.getParent();
				while(parentNode.attributeValue("name")!="") {
					parentNode=parentNode.getParent();
					System.out.println("+++++++++++++"+parentNode.attributeValue("name"));
					String testSuiteName=parentNode.attributeValue("name");
					testSuitePathList.add(testSuiteName);
					testsuiteDeep++;
				}
				//System.out.println("...................."+node.getParent().attribute(1).getName());
		for(String suiteName:testSuitePathList) {
			System.out.println("*********用例路径***********"+suiteName);
		}
			}
		}

		// 获取用例的路径
		if (nodeName.equals("testcase") && !node.isRootElement()) {
			testCasePath = node.getParent().attributeValue("name");
			Element nodeParent = node.getParent();

			// if (nodeParent != null) {
			// testCasePath = nodeParent.attributeValue("name");
			//
			// }
			// System.out.println(" 用例路径为:" + testCasePath);
			testCasePath = node.getPath();

			System.out.println("**************************" + node.attributeValue("name") + "用例路径为:" + testCasePath);

			System.out.println("用例路径为:" + testCasePath);
			List<Attribute> listAttr = node.attributes();// 当前节点的所有属性的list
			for (Attribute attr : listAttr) {// 遍历当前节点的所有属性
				String name = attr.getName();// 属性名称
				String value = attr.getValue();// 属性的值

				System.out.println("属性名称：" + name + "属性值：" + value);

			}
		}

		// 递归遍历当前节点所有的子节点
		List<Element> listElement = node.elements();// 所有一级子节点的list
		for (Element e : listElement) {// 遍历所有一级子节点
			// System.out.println("递归的子节点元素数目为 :" + e.attributeCount() + " 递归的子节点元素名称为" +
			// e.getName());

			getNodes(e);// 递归
		}
	}

	public void getTestCasePath(String testCasePath) {
		String[] a = testCasePath.split("/");

		if (a.length != 0) {
            //0表示空、1表示根节点
			for (int i = 0; i < a.length; i++) {
				if (i != 0&&i!=1) {
					
					System.out.println(a[i]);
				}
			}
		}
	}

}
