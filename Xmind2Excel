package com.testlink;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.Node;
import org.dom4j.io.SAXReader;

public class Xmind2Excel {
	/**
	 * 获取文件的document对象，然后获取对应的根节点
	 * 
	 * @author MavenLea
	 */
	// private static String testCasePath = "";
	SAXReader sax = new SAXReader();// 创建一个SAXReader对象
	File xmlFile = new File("content.xml");
	static Element parentNode = null;
	static int testcaseRowNum = 1;
	// static String testcasePath1 = "";
	static String currentParentSuiteName = null;// 当前测试组件的名称

	static String excelFilePath = "xmind2testcase.xlsx";
	static Workbook workbook = ExcelUtil.readExcel(excelFilePath);// 读取Excel文件
	static Sheet caseSheet = workbook.getSheetAt(0);// 获取解析用例的表格
	private OutputStream stream;
	static Row testcaseRow = caseSheet.createRow(testcaseRowNum);
	static String testcaseName = null;// 用例名称
	static String importance = "";// 用例优先级

	public static void main(String[] args) throws FileNotFoundException, DocumentException {
		xmind2Excel();

	}

	public static void xmind2Excel() throws FileNotFoundException, DocumentException {
		/**
		 * 获取文件的document对象，然后获取对应的根节点
		 * 
		 * @author MavenLea
		 */
		// private static String testCasePath = "";
		String excelFilePath = "xmind2testcase.xlsx";
		// Workbook workbook = ExcelUtil.readExcel(excelFilePath);// 读取Excel文件
		// Sheet caseSheet = workbook.getSheetAt(0);// 获取解析用例的表格
		OutputStream stream;
		// Row testcaseRow = null;

		SAXReader sax = new SAXReader();// 创建一个SAXReader对象
		File xmlFile = new File("content.xml");

		Document document = sax.read(xmlFile);// 获取document对象,如果文档无节点，则会抛出Exception提前结束
		Element root = document.getRootElement();// 获取根节点
		System.out.println("--------------------根节点名称为:" + root.getName());
		getNodes(root);// 从根节点开始遍历所有节点

		try {
			stream = new FileOutputStream(excelFilePath);

			workbook.write(stream);
			stream.close();
		} catch (IOException e1) {
			// TODO 自动生成的 catch 块
			e1.printStackTrace();
		}

	}

	/**
	 * 递归查找children节点下的子节点
	 * 
	 * @param e
	 */
	public static void findChild(Element e) {
		Element children = e.element("children");
		Element childrenTp = children.element("topics");

		List<Element> excepts = childrenTp.elements("topic");
		for (Element exceptEl : excepts) {
			String except = exceptEl.attributeValue("title");// 用例期望
		}
	}

	public static void testsuiteJuge(Element node) {
		String nodeName = node.getName();

		List<String> testsuiteTopic = new ArrayList<>();
	//	 testcaseRow = caseSheet.createRow(testcaseRowNum);// 创建行
             

//		Cell testcasePathCell = testcaseRow.createCell(0);// 用例路径
//		Cell testcaseNameCell = testcaseRow.createCell(1);// 用例名称

		//Cell testcaseSummaryCell = testcaseRow.createCell(2);// 用例名称
//		Cell testcaseimportanceCell = testcaseRow.createCell(3);
//		Cell testcasePreconditionsCell = testcaseRow.createCell(4);

//		Cell testcaseActionsCell = testcaseRow.createCell(5);

//		Cell testcaseExpectedresultsCell = testcaseRow.createCell(6);
		// 分支主题
		if (nodeName.equals("topics") && node.attributeValue("type").equals("attached")) {

			List<Element> topicList = node.elements("topic");// 获取分支节点

			for (Element e : topicList) {

				if (e.getName().equals("topic")) {
					// 获取主题图标
					Element marker = e.element("marker-refs");
					if (marker != null) {
						Element markerRef = marker.element("marker-ref");
						String markerIcon = markerRef.attributeValue("marker-id");
						System.out.println("==================主题引用的图标为:" + markerIcon);

						// 测试用例,获取测试用例的名称
						String topicName = e.element("title").getStringValue();
						//获取用例前提及描述
						Element notes=e.element("notes");//获取用例备注
						
						// 优先级标记表示测试用例
						if (markerIcon.startsWith("priority")) {
							// 取得优先级数字
							String suffix = markerIcon.replaceAll("priority-", "");
							System.out.println("suf=-----------------" + suffix);

							testcaseName = topicName;
							
							if(notes!=null) {
								
								String prediction=notes.element("plain").getStringValue();
								//前提
								Cell testcasePreconditionsCell = testcaseRow.createCell(4);

								testcasePreconditionsCell.setCellValue(prediction);
							}
							

							switch (suffix) {

							case "1":
								importance = "高";
								break;

							case "2":
								importance = "中";
								break;

							case "3":
								importance = "低";
								break;

							}
							System.out.println("当前节点为测试用例,用例名称为:" + testcaseName + "优先级为:" + importance);

							// 测试组件

							node = node.getParent().getParent();// 获取当前节点的父节点,topic节点的上级父节点

							List<String> testSuitePathList = new ArrayList<String>();
							// 当前节点的名称
							// String currentSuiteName = node.attributeValue("name");

							String currentestsuiteName = null;// 测试用例名称

							Element currentMarker = node.element("marker-refs");
							String testsuiteMarkerIcon = null;
							if (currentMarker != null) {
								Element testsuiteMarkerRef = currentMarker.element("marker-ref");
								testsuiteMarkerIcon = testsuiteMarkerRef.attributeValue("marker-id");
								System.out.println("测试组件==================主题引用的图标为:" + markerIcon);
								String testsuiteTopicName = node.element("title").getStringValue();

								// 旗帜标记表示测试组件

								if (testsuiteMarkerIcon != null && testsuiteMarkerIcon.startsWith("flag")) {
									currentestsuiteName = testsuiteTopicName;
									System.out.println("当前节点为测试组件，名称为:" + testsuiteTopicName);
									testsuiteTopic.add(currentestsuiteName);

									System.out.println(
											"进入while循环前节点的名称为:" + node.getName() + "topic值为:" + testsuiteTopicName);
									// topic节点的type属性

									String nodeParentTypeValue = node.getParent().attributeValue("type");
									// 第一个topic节点具有的属性
									String rootTp = node.attributeValue("structure-class");
									if (nodeParentTypeValue != null) {

										while (nodeParentTypeValue.equals("attached")) {

											if (!node.isRootElement() && rootTp == null) {

												node = node.getParent().getParent().getParent();// 获取当前节点的父节点,topic节点的上级父节点
											}
											// 节点不为空并且包含图标
											if (node != null && node.element("marker-refs") != null) {
												System.out.println("-----节点的名称为--------" + node.getName());
												currentParentSuiteName = node.element("title").getStringValue();
												System.out.println("----------------父组件的名称为:" + currentParentSuiteName);
											} else {
												break;
											}

											testSuitePathList.add(currentParentSuiteName);

										}
									}

									for (String testsuite : testSuitePathList) {

										System.out.println("***********遍历测试组件路径********************" + testsuite);
									}

								}

								StringBuffer stringBuffer = new StringBuffer();
								Collections.reverse(testSuitePathList);
								// 获得用例路径
								for (String suiteName : testSuitePathList) {
									stringBuffer.append(suiteName + "/");
								}
								String testcaseFullPath = stringBuffer + currentestsuiteName;
								System.out.println("-----------------设置用例路径-----------------------");
								Cell testcasePathCell = testcaseRow.createCell(0);// 用例路径

								testcasePathCell.setCellValue(testcaseFullPath);
								System.out.println("-----------------设置用例名称-----------------------");
								Cell testcaseNameCell = testcaseRow.createCell(1);// 用例名称

								testcaseNameCell.setCellValue(testcaseName);
								System.out.println("-----------------设置用例优先级-----------------------");

								Cell testcaseimportanceCell = testcaseRow.createCell(3);//优先级

								testcaseimportanceCell.setCellValue(importance);
								System.out.println("用例完整路径为:" + testcaseFullPath);
								System.out.println("用例路径为: " + testcaseFullPath + " 用例名称为:" + testcaseName + " 用例优先级为:"
										+ importance);
								Element children = e.element("children");// 获取用例步骤
								Element stepTp = children.element("topics");
								System.out.println("stepTp的名称为:" + stepTp.getName());
								List<Element> steps = stepTp.elements("topic");
								for (Element stepEl : steps) {
									testcaseRow = caseSheet.createRow(testcaseRowNum);// 创建行
									testcaseRowNum++;
									System.out.println("=================当前行号为:================"+testcaseRow.getRowNum());
									System.out.println("-------------用例的行数为:--------------"+testcaseRowNum);
									String action = stepEl.element("title").getStringValue();// 用例步骤
									System.out.println("---------------设置用例步骤-----------------------");
									System.out.println("用例步骤为:" + action);
									//步骤
									Cell testcaseActionsCell = testcaseRow.createCell(5);

									testcaseActionsCell.setCellValue(action);// 写入测试步骤

									Element exceptChild = stepEl.element("children");
									Element exceptTp = exceptChild.element("topics");

									List<Element> excepts = exceptTp.elements("topic");
									String except = null;
									List<String> exceptList = new ArrayList<>();
									for (Element exceptEl : excepts) {
										except = exceptEl.element("title").getStringValue();// 用例期望
										exceptList.add(except);

									}
									int exceptSize = exceptList.size();
									//期望
									Cell testcaseExpectedresultsCell = testcaseRow.createCell(6);
									// 单步骤

									if (exceptSize == 1) {
										System.out.println("---------------设置用例期望-----------------------");

										testcaseExpectedresultsCell.setCellValue(except);
									}
									// 多步骤
									if (exceptSize > 1) {
										StringBuffer str = new StringBuffer();
										for (String mExcept : exceptList) {
											str.append(mExcept + "\n");
										}
										System.out.println("---------------设置用例期望-----------------------");

										testcaseExpectedresultsCell.setCellValue(str.toString());

									}

								}

							//	testcaseRow = caseSheet.createRow(testcaseRowNum);// 创建行


								node = e.getParent();// 将node的值还原

							}

						}

					}

				}
			}

		}
	}

	/**
	 * 
	 * @param node 递归的节点
	 * @throws FileNotFoundException
	 */
	public static void getNodes(Element node) throws FileNotFoundException {

		System.out.println("--------------------");
		Row testcaseTitle = caseSheet.createRow(0);// 创建表头
		// CellStyle style = workbook.createCellStyle();
		// style.setBorderBottom(BorderStyle.THIN);
		// //style.setBorderBottom(BorderStyle.THIN);
		// style.setBottomBorderColor(IndexedColors.BLACK.getIndex());
		// style.setBorderLeft(BorderStyle.THIN);
		// style.setLeftBorderColor(IndexedColors.BLACK.getIndex());
		// style.setBorderRight(BorderStyle.THIN);
		// style.setRightBorderColor(IndexedColors.BLACK.getIndex());
		// style.setBorderTop(BorderStyle.THIN);
		// style.setTopBorderColor(IndexedColors.BLACK.getIndex());
		// style.setWrapText(true);
		Cell testcasesPathCell = testcaseTitle.createCell(0);
		testcasesPathCell.setCellValue("测试用例路径");
		// testcasesPathCell.setCellStyle(style);
		Cell testnameCell = testcaseTitle.createCell(1);
		testnameCell.setCellValue("测试用例名称");
		// testnameCell.setCellStyle(style);
		Cell testSummaryCell = testcaseTitle.createCell(2);
		testSummaryCell.setCellValue("测试用例描述");
		// testSummaryCell.setCellStyle(style);
		Cell importanceCell = testcaseTitle.createCell(3);
		importanceCell.setCellValue("优先级");
		// importanceCell.setCellStyle(style);
		Cell precondictionCell = testcaseTitle.createCell(4);
		precondictionCell.setCellValue("前提");
		// precondictionCell.setCellStyle(style);
		Cell stepCell = testcaseTitle.createCell(5);
		stepCell.setCellValue("步骤");
		// stepCell.setCellStyle(style);
		Cell expectCell = testcaseTitle.createCell(6);
		expectCell.setCellValue("期望结果");
		// expectCell.setCellStyle(style);

		// 当前节点的名称、文本内容和属性
		String nodeName = node.getName();
		String nodeContent = node.getTextTrim();
		System.out.println("当前节点名称：" + nodeName);// 当前节点名称
		System.out.println("当前节点的内容：" + nodeContent);// 当前节点内容
		// testcaseRow=caseSheet.createRow(testcaseRowNum);
		if (node != null) {

			testsuiteJuge(node);
		}

		// 递归遍历当前节点所有的子节点
		List<Element> listElement = node.elements();// 所有一级子节点的list
		for (Element e : listElement) {// 遍历所有一级子节点
			// System.out.println("递归的子节点元素数目为 :" + e.attributeCount() + " 递归的子节点元素名称为" +
			// e.getName());

			getNodes(e);// 递归
		}

	}

}
